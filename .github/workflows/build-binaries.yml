name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build:rs --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build:rs --target aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: yarn build:rs --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: i686-pc-windows-msvc
            build: yarn build:rs --target i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: yarn build:rs --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |
              sudo apt-get update
              sudo apt-get install musl-tools
              yarn build:rs --target x86_64-unknown-linux-musl
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              sudo apt-get update
              sudo apt-get install gcc-aarch64-linux-gnu
              yarn build:rs --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: i686-unknown-linux-gnu
            build: |
              sudo apt-get update
              sudo apt-get install gcc-multilib
              yarn build:rs --target i686-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf
              yarn build:rs --target armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: x86_64-unknown-freebsd
            build: yarn build:rs --target x86_64-unknown-freebsd

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build binary
        run: ${{ matrix.settings.build }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.settings.target }}
          path: |
            *.node
            cjs/*.node
            esm/*.node

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for dir in artifacts/binaries-*; do
            target=$(basename "$dir" | sed 's/binaries-//')
            for file in "$dir"/*.node; do
              if [ -f "$file" ]; then
                asset_name="idea-parser-${target}.node"
                echo "Uploading $file as $asset_name"
                curl \
                  -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$asset_name"
              fi
            done
          done
