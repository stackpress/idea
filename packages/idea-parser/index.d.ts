/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Parse schema code into JSON configuration with references preserved
 *
 * This function takes raw .idea schema code as input and returns a JSON string
 * containing the parsed schema with all references (props, use statements) intact.
 * This is equivalent to the TypeScript `parse()` function.
 *
 * # Arguments
 * * `code` - The raw .idea schema code as a string
 *
 * # Returns
 * * `Result<String>` - JSON string representation of the parsed schema, or an error
 *
 * # Example
 * ```javascript
 * const result = parse(`
 *   prop Text { type "text" }
 *   model User { name String @field.input(Text) }
 * `);
 * // Returns JSON with prop references preserved
 * ```
 */
export declare function parse(code: string): string
/**
 * Parse schema code into final JSON configuration with references resolved and removed
 *
 * This function is similar to `parse()` but performs additional processing:
 * 1. Resolves all prop references inline
 * 2. Removes the 'prop' and 'use' sections from the output
 * 3. Returns a clean, final configuration ready for consumption
 *
 * This is equivalent to the TypeScript `final()` function.
 *
 * # Arguments
 * * `code` - The raw .idea schema code as a string
 *
 * # Returns
 * * `Result<String>` - JSON string representation of the final schema, or an error
 *
 * # Example
 * ```javascript
 * const result = final(`
 *   prop Text { type "text" }
 *   model User { name String @field.input(Text) }
 * `);
 * // Returns JSON with prop references resolved and prop section removed
 * ```
 */
export declare function final(code: string): string
